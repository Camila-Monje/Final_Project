// Raspberry

import os
import cv2
import time
import serial
import numpy as np
from collections import Counter
from ultralytics import YOLO
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.request import HTTPXRequest

TOKEN = '8027987269:AAHEzrXOv-IAYxBQ-xUtNjgXw7ul3-SOtnU'
CAPTURA_DIR = 'capturas_dead'
SERIAL_PORT = '/dev/ttyACM0'
BAUD_RATE = 115200

CLASSES = ['ripe', 'semi ripe', 'dead']
WAIT_SECONDS = 5
TIEMPO_RECORRIDO = 40

# UART
try:
    ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
    print(f"Conectado al puerto {SERIAL_PORT} a {BAUD_RATE} bps")
except serial.SerialException as e:
    print(f"No se pudo abrir el puerto: {e}")
    exit(1)

bot = Bot(token=TOKEN)
model = YOLO('/home/raspdcl/Proyecto Final/best.pt')

def camera():
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("No se pudo abrir la cámara")
        exit()
    return cap

def detection(frame):
    results = model.track(source=frame, persist=True, conf=0.1, verbose=False)
    names = model.names
    boxes = results[0].boxes
    labels = boxes.cls.cpu().numpy().astype(int) if boxes is not None else []
    clases_detectadas = [names[c] for c in labels if names[c] in CLASSES]
    return results[0], Counter(clases_detectadas)

def clear_folder():
    for archivo in os.listdir(CAPTURA_DIR):
        ruta_archivo = os.path.join(CAPTURA_DIR, archivo)
        try:
            os.remove(ruta_archivo)
            print(f"Imagen eliminada: {ruta_archivo}")
        except Exception as e:
            print(f"No se pudo eliminar {ruta_archivo}: {e}")

def save_photos_all_classes(frame, detecciones, contador_total):
    frame_con_boxes = frame.copy()
    colores = {
        'ripe': (0, 255, 0),
        'semi ripe': (0, 255, 255),
        'dead': (0, 0, 255)
    }

    for box, cls_id in zip(detecciones.boxes.xyxy, detecciones.boxes.cls):
        clase = model.names[int(cls_id)]
        if clase in CLASSES:
            x1, y1, x2, y2 = map(int, box.tolist())
            color = colores.get(clase, (255, 255, 255))
            cv2.rectangle(frame_con_boxes, (x1, y1), (x2, y2), color, 2)
            cv2.putText(frame_con_boxes, clase, (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    nombre = f"deteccion_{contador_total + 1}.jpg"
    ruta = os.path.join(CAPTURA_DIR, nombre)
    cv2.imwrite(ruta, frame_con_boxes)
    print(f"Imagen guardada con bounding boxes: {ruta}")
    return contador_total + 1

def recorrer_y_dibujar(cap):
    counted = {cls: 0 for cls in CLASSES}
    last_save_time = 0
    image_count = 0

    if os.path.exists(CAPTURA_DIR):
        for f in os.listdir(CAPTURA_DIR):
            os.remove(os.path.join(CAPTURA_DIR, f))
    else:
        os.makedirs(CAPTURA_DIR)

    start_time = time.time()

    while time.time() - start_time < TIEMPO_RECORRIDO:
        ret, frame = cap.read()
        if not ret:
            print("Error al leer frame")
            break

        current_time = time.time()
        result, frame_counts = detection(frame)

        if sum(frame_counts.values()) > 0 and (current_time - last_save_time) >= WAIT_SECONDS:
            image_count = save_photos_all_classes(frame, result, image_count)
            last_save_time = current_time

            # Conteo directo de todas las detecciones por clase
            for cls in CLASSES:
                counted[cls] += frame_counts.get(cls, 0)

        # Detección de círculo azul
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        lower_blue = np.array([100, 150, 50])
        upper_blue = np.array([140, 255, 255])
        mask = cv2.inRange(hsv, lower_blue, upper_blue)
        blue_only = cv2.bitwise_and(frame, frame, mask=mask)
        gray = cv2.cvtColor(blue_only, cv2.COLOR_BGR2GRAY)
        gray = cv2.medianBlur(gray, 5)

        circles = cv2.HoughCircles(
            gray, cv2.HOUGH_GRADIENT, dp=1.2, minDist=30,
            param1=50, param2=30, minRadius=10, maxRadius=100
        )

        if circles is not None:
            ser.write(b"4\n")
            print("Círculo azul detectado → enviado '4'")
            break

    return counted, image_count

async def send_images_telegram(detection, cantidad_imgs, update):
    msg = "✅ Detección final tras el recorrido:\n"
    msg += "\n".join([f"- {k}: {v}" for k, v in detection.items()])

    try:
        await update.message.reply_text(msg, parse_mode="Markdown")
    except Exception as e:
        print(f"No se pudo enviar mensaje por Telegram: {e}")

    if cantidad_imgs > 0:
        for i in range(cantidad_imgs):
            ruta = os.path.join(CAPTURA_DIR, f"deteccion_{i + 1}.jpg")
            if os.path.exists(ruta):
                try:
                    with open(ruta, 'rb') as photo:
                        await update.message.reply_photo(photo=photo, caption=f"Detección {i + 1}")
                except Exception as e:
                    print(f"No se pudo enviar la imagen {ruta}: {e}")
    
    clear_folder()

async def monitoring(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ser.write(b"2\n")
    await update.message.reply_text("➡ Comenzando recorrido")
    print("Comando /empezar_recorrido enviado: 2")

    cap = camera()
    conteo_final, cantidad_imgs = recorrer_y_dibujar(cap)
    cap.release()
    await send_images_telegram(conteo_final, cantidad_imgs, update)

async def irrigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ser.write(b"3\n")
    await update.message.reply_text("⬅ Inicio de riego")
    print("Comando /riego enviado: 3")

def main():
    request = HTTPXRequest(connect_timeout=10.0, read_timeout=20.0)
    app = ApplicationBuilder().token(TOKEN).request(request).build()
    app.add_handler(CommandHandler("empezar_recorrido", monitoring))
    app.add_handler(CommandHandler("riego", irrigation))
    print("Bot escuchando comandos...")
    app.run_polling()

if _name_ == "_main_":
    main()
